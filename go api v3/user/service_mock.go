// Code generated by mockery v2.10.0. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Create provides a mock function with given fields: model
func (_m *MockService) Create(model Model) (uint, error) {
	ret := _m.Called(model)

	var r0 uint
	if rf, ok := ret.Get(0).(func(Model) uint); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Model) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockService) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MockService) Get(id uint) (*Model, error) {
	ret := _m.Called(id)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(uint) *Model); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, model
func (_m *MockService) Update(id uint, model Model) error {
	ret := _m.Called(id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, Model) error); ok {
		r0 = rf(id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
